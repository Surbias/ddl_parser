# specifies the where the log file for the DDL statements will be created
ddlStatementsLogFileDirectory=log

# Specifies whether DDL statements will be modified (true) or just logged and passed through
# unchanged (false)
applyModifiedStatements=true

# Specifies whether all DDL statements will be suppressed (true) or transformed and applied
# Set this value to true if no DDL statement must be executed on the target side
suppressAllStatements=false

# Tables for which DDLs must be suppressed. Specify fully qualified table name, for example CDCDEMOA.CUSTOMER.
# Multiple tables can be specified, separated by a semicolon (;). Example: CDCDEMOA.CUSTOMER;CDCDEMOA.PRODUCT
suppressTables=

# Specifies whether VARCHAR2(nn) will be replaced by VARCHAR2(nn CHAR)
replaceVarchar2=true

# Specifies the CDC user on the target database; this is the user that owns the CDC metadata
# and stored procedures called by the user exit
cdcDBUser=ISCDCORA

# Indicates the level of tracing that will be output to the CDC instance logs which can be found
# under <cdc_home>/instances/<instance>/log
debug=true

########################## REGEX PATTERNS ###############################
# The following block is a list of regular expressions which are used to#
# detect and substitute (parts of) the DDL statements passed to the user#
# exit.                                                                 #
#########################################################################

###
### Regexes to identify statements or clauses to be handled (no generic handling)
###

# CREATE TABLE
createTable=\\s*create\\s+table

# Detect primary key constraint using index in CREATE TABLE statement
# Non-escaped regex: ,(\s+constraint\s+\"?(\w+)\"?)?\s+primary\s+key.*?using\s+index
createTableConstraintPKUsingIndex=,(\\s+constraint\\s+\"?(\\w+)\"?)?\\s+primary\\s+key.*?using\\s+index

# CHECK CONSTRAINT within CREATE TABLE, not terminated by enable/validate
createTableConstraintCheckNoEnable=,(\\s+constraint\\s+\"?(\\w+)\"?)?\\s+check\\s+\\(

# CREATE UNIQUE INDEX --> this statement must only be executed if the table's primary key
# constraint did not create the unique index already
createUniqueIndex=create\\s+unique\\s+index

# Columns with type VARCHAR2(nn) to be replaced by VARCHAR2(nn CHAR) type
# Non-escaped regex: (\"?\w+\"?)(\s+varchar2)\(\s?(\d+)\s?\)
varchar2Type=(\"?\\w+\"?\\s+varchar2\\(\\s?)(\\d+)(\\s?\\))

###
### Regexes identifying clauses to be suppressed (replaced by empty string
###

# List of properties identifying clauses to be suppressed (semicolon-separated)
suppressedClauses=createTableConstraintFK;createTableConstraintCheck;createTableSupplementalLog;createTableDeletedTablespace;segmentCreationImmediate

# CREATE TABLE ... FOREIGN KEY ... (ON DELETE (CASCADE|SET NULL))?
# Non-escaped regex: ,(\s+constraint\s+\"?(\w+)\"?)?\s+foreign\s+key\s+(\(\"?\w+\"?(,\s*\"?\w+\"?)*\))\s+references\s+(\"?(\w+)\"?)?\.?(\"?(\w+)\"?)\s+(\(\"?\w+\"?(,\s*\"?\w+\"?)*\))(\s+on\s+delete\s+(cascade|set\s+null))?(\s+deferrable)?(\s+(enable|disable))?.*?(\s+(validate|novalidate))?
createTableConstraintFK=,(\\s+constraint\\s+\"?(\\w+)\"?)?\\s+foreign\\s+key\\s+(\\(\"?\\w+\"?(,\\s*\"?\\w+\"?)*\\))\\s+references\\s+(\"?(\\w+)\"?)?\\.?(\"?(\\w+)\"?)\\s+(\\(\"?\\w+\"?(,\\s*\"?\\w+\"?)*\\))(\\s+on\\s+delete\\s+(cascade|set\\s+null))?(\\s+deferrable)?(\\s+(enable|disable))?.*?(\\s+(validate|novalidate))?

# CREATE TABLE ... CHECK
# Non-escaped regex: ,(\s+constraint\s+\"?(\w+)\"?)?\s+check\s+\(.*?\s+(enable|disable)?.*?(\s+(validate|novalidate))?
createTableConstraintCheck=,(\\s+constraint\\s+\"?(\\w+)\"?)?\\s+check\\s+\\(.*?\\s+(enable|disable).*?(\\s+(validate|novalidate))?

# SUPPLEMENTAL LOG clauses part of the CREATE TABLE statements
# CREATE TABLE ... SUPPLEMENTAL LOG ... (ALWAYS|COLUMNS)
# Non-escaped regex: ,(\s+supplemental\s+log).*?(\s+(always|columns))
createTableSupplementalLog=,(\\s+supplemental\\s+log).*?(\\s+(always|columns))

# TABLESPACE("_$deleted$...") clauses part of the CREATE TABLE statements
# Non-escaped regex: \s+tablespace\(\"_\$deleted\$.*?\)
createTableDeletedTablespace=\\s+tablespace\\s+\"_\\$deleted\\$.*?\"

# SEGMENT CREATION IMMEDIATE clauses part of the CREATE TABLE statements
# Non-escaped regex: \s+segment\s+creation\s+immediate
segmentCreationImmediate=\\s+segment\\s+creation\\s+immediate

###
### Regexes identifying statements to be suppressed
###

# List of properties identifying the suppressed statements regexes (semicolon-separated)
suppressedStatements=alterTableAddConstraintFK;alterTableAddConstraintCheck;alterTableShrinkSpace;createIndex;createBitmapIndex;alterIndexShrinkSpace;grantOnTo

# ALTER TABLE ... ADD ... CONSTRAINT ... FOREIGN KEY
alterTableAddConstraintFK=alter\\s+table\\s.*add(\\s+constraint\\s+\"?(\\w+)\"?)?\\s+foreign\\s+key

# ALTER TABLE ... ADD ... CONSTRAINT ... CHECK
alterTableAddConstraintCheck=alter\\s+table\\s.*add(\\s+constraint\\s+\"?(\\w+)\"?)?\\s+check

# ALTER TABLE ... SHRINK SPACE ...
alterTableShrinkSpace=alter\\s+table\\s.*shrink\\s+space

# CREATE INDEX
# Non-escaped regex: drop\s+(index)\s+(\"?(\w+)\"?\\.)?\"?(\w+)\"?
createIndex=create\\s+index

# CREATE BITMAP INDEX
createBitmapIndex=create\\s+bitmap\\s+index

# ALTER INDEX ... SHRINK SPACE ...
alterIndexShrinkSpace=alter\\s+index\\s+.*shrink\\s+space

# GRANT ... ON ... TO
grantOnTo=grant.*on.*to

###
### Regexes identifying statements to be executed only if object exists
###

# List of properties identifying statements to be executed if object exists (semicolon-separated)
executeIfExists=dropTable;alterIndex;dropIndex

# DROP TABLE
# Non-escaped regex: drop\s+(table)\s+(\"?(\w+)\"?\\.)?\"?(\w+)\"?
dropTable=drop\\s+(table)\\s+(\"?(\\w+)\"?\\.)?\"?(\\w+)\"?

# ALTER INDEX
# Non-escape regex: alter\s+(index)\s+(\"?(\w+)\"?\.)?\"?(\w+)\"?
alterIndex=alter\\s+(index)\\s+(\"?(\\w+)\"?\\.)?\"?(\\w+)\"?

# DROP INDEX
# This statement must only be executed if the index in question exists
dropIndex=drop\\s+(index)\\s+(\"?(\\w+)\"?\\.)?\"?(\\w+)\"?

###
### String transformations. These semicolon-separated strings will be replaced. The format
### to be specified is: string;replacement_string
###

# list of properties identifying string to be replaced (comma-separated)
replacedStrings=defaultDate10JAN02

# 10-JAN-02 --> 2002-01-10
# defaultDate10JAN02=10-JAN-02;2002-01-10
defaultDate10JAN02='10-JAN-02';'2002-01-02 00:00:00 BC'